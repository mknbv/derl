""" Generic derl script to launch an algorithm. """
#!/usr/bin/env python3
from argparse import ArgumentParser
import derl


def get_factories():
  """ Returns factory name to factory class mapping. """
  return {
      k[:-len("Factory")].lower().replace("_", "-"): getattr(derl, k)
      for k in dir(derl) if k != "Factory" and k.endswith("Factory")
  }


def main():
  """ Script entry point. """
  parser = ArgumentParser()
  factories = get_factories()
  parser.add_argument("factory", choices=list(factories.keys()))
  args, unknown_args = parser.parse_known_args()
  factory_class = factories[args.factory]

  args = derl.get_args(
      atari_defaults=factory_class.get_parser_defaults("atari"),
      mujoco_defaults=factory_class.get_parser_defaults("mujoco"),
      args=unknown_args)

  kwargs = vars(args)
  derl.summary.make_writer(args.logdir)
  env = derl.env.make(args.env_id, kwargs.get("nenvs"), kwargs.get("seed"),
                      **factory_class.make_env_kwargs(args.env_id))
  alg = factory_class(ignore_unused=("env_id", "nenvs", "logdir", "nlogs"),
                      **kwargs).make(env, nlogs=args.nlogs)
  alg.learn()


if __name__ == "__main__":
  main()
